import torch
import torch.nn as nn
import torch.nn.functional as F
torch.manual_seed(1)

x_train=torch.FloatTensor([[73,80,75],
                           [93,88,93],
                           [89,91,90],
                           [96,98,100],
                           [73,66,70]])
y_train=torch.FloatTensor([[152],[185],[180],[196],[142]])

class LinearModel(nn.Module):
    def __init__(self):
        super().__init__()
        self.linear=nn.Linear(3,1)  #입력 차원->3, 출력 차원->1
    def forward(self,x):
        return self.linear(x)

model=LinearModel()
optimizer=torch.optim.SGD(model.parameters(),lr=1e-5)
epoch_number=2000
for epoch in range(epoch_number):
    prediction=model(x_train)
    cost=F.mse_loss(prediction,y_train)
    optimizer.zero_grad()
    cost.backward()
    optimizer.step()

    if epoch%100==0:
        print('Epoch {:4d}/{} Cost: {:.6f}'.format(epoch,epoch_number,cost.item()))
